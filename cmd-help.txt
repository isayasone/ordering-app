alias  k ="kubectl"
k rollout  status deploy k8s-web-hello
k delete all -all

 kubectl apply -f deployment.yaml
minikube  service k8s-web-hello

k delete  -f deployment.yaml  -f service.yaml

k exec   <pod-name> -- nslookup   nginx ( whoami)  (ls)

ingress maping  name to ip

k  get namespace

docker ps
docker exec -it <id/name> sh  iit will  create session in container
k describe  pod  <pod name>

minikube kubectl --create depolyment <name>  --image=<image  value>
 k  get svc
  k expose deployment  <dep name> --port=3000 --target -- port=80
 k  scale  deployment <name> --replicas=number

minikube dashboard

docker build .  -t <name>
k delete -all
 updating   image
 k set image deployment  <dep name>  <image name>

minikube   service <service name> <-- to  serve


helm
package manager for Kubernets
e.g to install     that useed for statefull  DB
configmap
secrets
k8s  users
     helm chart    to make avlibale to other

helm search <keyword>
   As Templating Engine
 e,.g  without helm microserice  d/t muti service yaml . replace one file  template file , place holder values {{ .values}}}
  values.yaml
 template.yaml


 ====================
 npx create-react-app my-app --template typescript
npm i react-test-renderer

npm i --save-dev @testing-library/jest-dom

# Build the Docker image for the current folder
# and tag it with `dockerized-react`
docker build . -t dockerized-react

# Check the image was created
docker images | grep dockerized-react

# Run the image in detached mode
# and map port 3000 inside the container with 3000 on current host
docker run -p 3000:3000 -d dockerized-react
e0000
1q13ed
SELECT s.hacker_id, h.name
FROM
    Submissions s JOIN Challenges c ON s.challenge_id=c.challenge_id
    JOIN Difficulty d ON c.difficulty_level=d.difficulty_level
    JOIN Hackers h ON h.hacker_id=s.hacker_id
WHERE d.score=s.score
GROUP BY s.hacker_id, h.name
HAVING COUNT(c.challenge_id)>1
ORDER BY COUNT(c.challenge_id) DESC, s.hacker_id
